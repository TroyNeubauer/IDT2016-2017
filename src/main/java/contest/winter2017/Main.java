package contest.winter2017;

import java.io.*;

import org.apache.commons.cli.*;

import contest.winter2017.ohsfile.*;

/**
 * Entry-point class for the black-box testing framework
 * 
 * @author IDT
 */
@SuppressWarnings("all")
public class Main {
	
	public static boolean DEBUG = true;

	public static File OHSFileSaveLocation = null;
	/**
	 * cli key for path to the executable black-box jar to test
	 */
	public static final String JAR_TO_TEST_PATH = "jarToTestPath";

	/**
	 * cli key for path to the directory to be used to store output generated by
	 * jacoco framework
	 */
	public static final String JACOCO_OUTPUT_PATH = "jacocoOutputPath";

	/**
	 * cli key for path to the jacoco agent jar used to instrument the
	 * executable black-box jar in order to collect code coverage metrics
	 */
	public static final String JACOCO_AGENT_JAR_PATH = "jacocoAgentJarPath";

	/**
	 * cli key for application help
	 */
	public static final String HELP = "help";

	/**
	 * alternative cli key for application help
	 */
	public static final String ALT_HELP = "h";

	/**
	 * cli key for the number of exploratory black box tests to run
	 */
	public static final String BLACK_BOX_TESTS = "bbTests";

	/**
	 * cli key for the test time goal in minutes
	 */
	public static final String TIME_GOAL = "timeGoal";

	/**
	 * cli key for limitting the output to contain only the parseable YAML
	 * report
	 */
	public static final String TOOL_CHAIN = "toolChain";

	/**
	 * where to save the resulting data to
	 */
	public static final String OHS_FILE_OUTPUT = "save";

	/**
	 * weather or not saving is disabled (enabled by default)
	 */
	public static final String DISABLE_OHS_SAVE = "disableSaving";

	/**
	 * weather or not saving is disabled (enabled by default)
	 */
	private static boolean disableSaving = false;

	private static boolean hasTimeGoal, hasBBtests = false;

	/**
	 * Entry-point method for the black-box testing framework
	 * 
	 * @param args
	 *            - String array of command line arguments
	 */
	public static void main(String[] args) {

		CommandLineParser parser = new DefaultParser();

		Options options = new Options();
		options.addOption(JAR_TO_TEST_PATH, true, "path to the executable jar to test");
		options.addOption(JACOCO_OUTPUT_PATH, true, "path to directory for jacoco output");
		options.addOption(JACOCO_AGENT_JAR_PATH, true, "path to the jacoco agent jar");
		options.addOption(HELP, false, "help");
		options.addOption(ALT_HELP, false, "help");
		options.addOption(BLACK_BOX_TESTS, true, "number of black box test to be executed");
		options.addOption(TIME_GOAL, true, "test time goal in minutes");
		options.addOption(TOOL_CHAIN, false, "output only the YAML report");
		options.addOption(OHS_FILE_OUTPUT, true, "where to save the custom file to");
		options.addOption(DISABLE_OHS_SAVE, false, "disable saving to an OHS file after testing is complete");

		try {
			CommandLine cliArgs = parser.parse(options, args);

			if (cliArgs != null) {

				// if we have the three arguments we need for exploratory
				// black-box testing, initialize and execute the tester.
				if (cliArgs.hasOption(JAR_TO_TEST_PATH) && cliArgs.hasOption(JACOCO_OUTPUT_PATH) && cliArgs.hasOption(JACOCO_AGENT_JAR_PATH)) {

					String jarToTestPath = cliArgs.getOptionValue(JAR_TO_TEST_PATH);
					String jacocoOutputDirPath = cliArgs.getOptionValue(JACOCO_OUTPUT_PATH);
					String jacocoAgentJarPath = cliArgs.getOptionValue(JACOCO_AGENT_JAR_PATH);

					// the Tester class contains all of the logic for the
					// testing framework
					int bbTests = 1000;
					long timeGoal = 5 * 60 * 1000;// 5 minuites * 60 seconds per
													// minuite * 1000 ms per
													// second
					boolean toolChain = false;

					if (cliArgs.hasOption(BLACK_BOX_TESTS)) {
						if (Integer.parseInt(cliArgs.getOptionValue(BLACK_BOX_TESTS)) < 0) {
							System.out.println("An illegal argument was entered. Please enter a positive integer.");
							printHelp(options);
							return;
						}
						bbTests = Integer.parseInt(cliArgs.getOptionValue(BLACK_BOX_TESTS));
						hasBBtests = true;
					}

					if (cliArgs.hasOption(TIME_GOAL)) {
						if (Integer.parseInt(cliArgs.getOptionValue(TIME_GOAL)) < 0) {
							System.out.println("An illegal argument was entered. Please enter a positive integer.");
							printHelp(options);
							return;
						}
						timeGoal = Long.parseLong(cliArgs.getOptionValue(TIME_GOAL)) * 60L * 1000L;
						hasTimeGoal = true;
					}
					if (cliArgs.hasOption(TOOL_CHAIN)) {
						toolChain = true;
					}

					if (cliArgs.hasOption(OHS_FILE_OUTPUT)) {
						String path = cliArgs.getOptionValue(OHS_FILE_OUTPUT);
						OHSFileSaveLocation = new File(path);
					} else {
						OHSFileSaveLocation = new File("./" + OHSFileIO.FILE_DIR_NAME + "/");
					}

					if (cliArgs.hasOption(DISABLE_OHS_SAVE)) {
						disableSaving = true;
					}
					boolean stopAtBBTests = true;
					// If they didnt specify anything
					if (!hasTimeGoal && !hasBBtests) {
						stopAtBBTests = true;
						bbTests = 1000;
					}
					// They specified BB tests but not time goal
					if (!hasTimeGoal && hasBBtests) stopAtBBTests = true;
					
					// They didn't specify BB but specified time goal
					if (hasTimeGoal && !hasBBtests) stopAtBBTests = false;

					// They specified both
					if (hasTimeGoal && hasBBtests) stopAtBBTests = true;
					
					Tester tester = new Tester(bbTests, timeGoal, toolChain, stopAtBBTests);
					if (tester.init(jarToTestPath, jacocoOutputDirPath, jacocoAgentJarPath)) {

						tester.executeBasicTests();
						// TODO pseudo values have been set for the ranges, fix
						// later
						tester.executeSecurityTests();
						if (!disableSaving) {
							MainFile outputFile = null;
							try {
								outputFile = MainFile.create(OHSFileSaveLocation);
								OHSFileIO.write(tester.getOHSFile(), outputFile);
							} catch (IOException e) {
								System.err.println("Unable to generate results file!");
								e.printStackTrace();
							}
							runReaderProgram(outputFile);
						}
					}

				} else if (cliArgs.hasOption(HELP) || cliArgs.hasOption(ALT_HELP) || cliArgs.hasOption(TOOL_CHAIN)) {

					printHelp(options);

				} else {

					System.out.println("Failed to execute - application requires at least three parameters.");
					printHelp(options);

				}
			}

		} catch (ParseException exp) {
			System.out.println("An error occurred during command line parsing: " + exp.getMessage());
		}
	}

	/**
	 * Runs the reader program
	 * @param outputFile
	 */
	private static void runReaderProgram(MainFile outputFile) {
		
	}

	/**
	 * private static method used to print the application help
	 */
	private static void printHelp(Options options) {
		String header = "\n";
		String footer = "\nFor additional information about the testing framework, please see the documentation provided by IDT.";

		HelpFormatter formatter = new HelpFormatter();
		formatter.printHelp("com.idtus.contest.winter2017.framework", header, options, footer, true);
	}

}